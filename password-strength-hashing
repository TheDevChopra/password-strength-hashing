import re
import hashlib

# Function to check password strength
def check_password_strength(password):
    length_error = len(password) < 8
    lowercase_error = re.search(r"[a-z]", password) is None
    uppercase_error = re.search(r"[A-Z]", password) is None
    digit_error = re.search(r"\d", password) is None
    special_char_error = re.search(r"[!@#$%^&*(),.?\":{}|<>]", password) is None

    score = 5 - sum([length_error, lowercase_error, uppercase_error, digit_error, special_char_error])

    if score <= 2:
        strength = "Weak"
    elif score in [3, 4]:
        strength = "Medium"
    else:
        strength = "Strong"

    reasons = []
    if length_error:
        reasons.append("Password is too short (minimum 8 characters).")
    if lowercase_error:
        reasons.append("No lowercase letters.")
    if uppercase_error:
        reasons.append("No uppercase letters.")
    if digit_error:
        reasons.append("No digits.")
    if special_char_error:
        reasons.append("No special characters.")

    return strength, reasons

# Hash using SHA256
def hash_sha256(password):
    return hashlib.sha256(password.encode('utf-8')).hexdigest()

# Simple salted hash (bcrypt alternative for online compilers)
def simple_salted_hash(password, salt="random_salt_value"):
    return hashlib.sha256((salt + password).encode('utf-8')).hexdigest()

# Educational explanation
def explain_security():
    print("\n=== Security Notes ===")
    print("1. Short passwords are easier to crack via brute-force or dictionary attacks.")
    print("2. Hashing converts a password into an irreversible string â€” safer for storage.")
    print("3. SHA256 is fast but not ideal for passwords because speed helps attackers.")
    print("4. Adding salt makes hashes unique, even if two people use the same password.\n")

def main():
    password = input("Enter a password to test: ")

    # Strength Check
    strength, reasons = check_password_strength(password)
    print(f"\nPassword Strength: {strength}")
    if reasons:
        print("Issues found:")
        for r in reasons:
            print(f" - {r}")

    # Hashing
    print("\n--- Hashing Demonstration ---")
    print(f"SHA256: {hash_sha256(password)}")
    print(f"Salted SHA256 (bcrypt alternative): {simple_salted_hash(password)}")

    # Explanation
    explain_security()

if __name__ == "__main__":
    main()
